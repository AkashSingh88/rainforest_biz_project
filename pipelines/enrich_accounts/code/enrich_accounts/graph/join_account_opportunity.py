from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from enrich_accounts.config.ConfigStore import *
from enrich_accounts.udfs.UDFs import *

def join_account_opportunity(spark: SparkSession, in_Account: DataFrame, in_Opportunity: DataFrame, ) -> DataFrame:
    return in_Account\
        .alias("in_Account")\
        .join(
          in_Opportunity.alias("in_Opportunity"),
          (col("in_Account.Id") == col("in_Opportunity.AccountId")),
          "left_outer"
        )\
        .select(col("in_Account.Id").alias("Id"), col("in_Opportunity.NumOpportunities").alias("NumOpportunities"), col("in_Opportunity.Amount").alias("Amount"), col("in_Opportunity.ExpectedRevenue").alias("ExpectedRevenue"), col("in_Opportunity.LastCloseQtr").alias("LastCloseQtr"), col("in_Account.IsDeleted").alias("IsDeleted"), col("in_Account.MasterRecordId").alias("MasterRecordId"), col("in_Account.Name").alias("Name"), col("in_Account.Type").alias("Type"), col("in_Account.ParentId").alias("ParentId"), col("in_Account.BillingStreet").alias("BillingStreet"), col("in_Account.BillingCity").alias("BillingCity"), col("in_Account.BillingState").alias("BillingState"), col("in_Account.BillingPostalCode").alias("BillingPostalCode"), col("in_Account.BillingCountry").alias("BillingCountry"), col("in_Account.BillingLatitude").alias("BillingLatitude"), col("in_Account.BillingLongitude").alias("BillingLongitude"), col("in_Account.BillingGeocodeAccuracy").alias("BillingGeocodeAccuracy"), col("in_Account.ShippingStreet").alias("ShippingStreet"), col("in_Account.ShippingCity").alias("ShippingCity"), col("in_Account.ShippingState").alias("ShippingState"), col("in_Account.ShippingPostalCode").alias("ShippingPostalCode"), col("in_Account.ShippingCountry").alias("ShippingCountry"), col("in_Account.ShippingLatitude").alias("ShippingLatitude"), col("in_Account.ShippingLongitude").alias("ShippingLongitude"), col("in_Account.ShippingGeocodeAccuracy").alias("ShippingGeocodeAccuracy"), col("in_Account.Phone").alias("Phone"), col("in_Account.Fax").alias("Fax"), col("in_Account.AccountNumber").alias("AccountNumber"), col("in_Account.Website").alias("Website"), col("in_Account.Sic").alias("Sic"), col("in_Account.Industry").alias("Industry"), col("in_Account.AnnualRevenue").alias("AnnualRevenue"), col("in_Account.NumberOfEmployees").alias("NumberOfEmployees"), col("in_Account.Ownership").alias("Ownership"), col("in_Account.TickerSymbol").alias("TickerSymbol"), col("in_Account.Description").alias("Description"), col("in_Account.Rating").alias("Rating"), col("in_Account.Site").alias("Site"), col("in_Account.OwnerId").alias("OwnerId"), col("in_Account.CreatedDate").alias("CreatedDate"), col("in_Account.CreatedById").alias("CreatedById"), col("in_Account.LastModifiedDate").alias("LastModifiedDate"), col("in_Account.LastModifiedById").alias("LastModifiedById"), col("in_Account.SystemModstamp").alias("SystemModstamp"), col("in_Account.LastActivityDate").alias("LastActivityDate"), col("in_Account.Jigsaw").alias("Jigsaw"), col("in_Account.JigsawCompanyId").alias("JigsawCompanyId"), col("in_Account.CleanStatus").alias("CleanStatus"), col("in_Account.AccountSource").alias("AccountSource"), col("in_Account.DunsNumber").alias("DunsNumber"), col("in_Account.Tradestyle").alias("Tradestyle"), col("in_Account.NaicsCode").alias("NaicsCode"), col("in_Account.NaicsDesc").alias("NaicsDesc"), col("in_Account.YearStarted").alias("YearStarted"), col("in_Account.SicDesc").alias("SicDesc"), col("in_Account.DandbCompanyId").alias("DandbCompanyId"), col("in_Account.OperatingHoursId").alias("OperatingHoursId"), col("in_Account.CustomerPriority__c").alias("CustomerPriority__c"), col("in_Account.SLA__c").alias("SLA__c"), col("in_Account.Active__c").alias("Active__c"), col("in_Account.NumberofLocations__c").alias("NumberofLocations__c"), col("in_Account.UpsellOpportunity__c").alias("UpsellOpportunity__c"), col("in_Account.SLASerialNumber__c").alias("SLASerialNumber__c"), col("in_Account.SLAExpirationDate__c").alias("SLAExpirationDate__c"))
